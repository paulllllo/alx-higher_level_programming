#!/usr/bin/python3
"""Defines a rectangle"""


class Rectangle:
    """Public attributes"""
    number_of_instances = 0
    print_symbol = "#"

    """A class that contains some attributes and methods/
    around a rectange"""
    def __init__(self, width=0, height=0):
        """A rectangle with width and height attributes"""
        if not isinstance(width, int):
            raise TypeError("width must be an integer")
        if width < 0:
            raise ValueError("width must be >= 0")
        if not isinstance(height, int):
            raise TypeError("height must be an integer")
        if height < 0:
            raise ValueError("height must be >= 0")
        self.__height = height
        self.__width = width
        Rectangle.number_of_instances += 1

    @property
    def width(self):
        """Gets the width of the rectangle"""
        return(self.__width)

    @width.setter
    def width(self, value):
        """Sets the width of the rectangle"""
        if not (isinstance(value, int)):
            raise TypeError("width must be an integer")
        if value < 0:
            raise ValueError("width must be >= 0")
        self.__width = value

    @property
    def height(self):
        """Gets the height of the rectangle"""
        return(self.__height)

    @height.setter
    def height(self, value):
        """Sets the height of the rectangle"""
        if not (isinstance(value, int)):
            raise TypeError("height must be an integer")
        if value < 0:
            raise ValueError("height must be >= 0")
        self.__height = value

    def area(self):
        """Calculates the area of the rectangle"""
        return(self.__width * self.__height)

    def perimeter(self):
        """calculates the perimeter of the rectangle"""
        if ((self.__width == 0) | (self.__height == 0)):
            return(0)
        return((2 * self.__width) + (2 * self.__height))

    def __str__(self):
        """A string reprisentaion of object/instance with 'H'"""
        if ((self.__width == 0) | (self.__height == 0)):
            return("")
        if self.print_symbol:
            symbol = f"({self.print_symbol})"
        else:
            symbol = f"({Rectangle.print_symbol})"
        line = symbol * self.__width
        return("\n".join([line] * self.__height))

    def __repr__(self):
        """A formal string representation of object/instance"""
        return f'Rectangle({self.__width}, {self.__height})'

    def __del__(self):
        """Indicates when all refs to an instance are deleted"""
        Rectangle.number_of_instances -= 1
        print("Bye rectangle...")
